#!/bin/bash
# A script to backup / restore arbitrary system files from multiple hosts to a 
# shared, versioned location, while caring for file permissions (mod, uid,gui).
# The script is based on aboslut pathes, to support system files.
# Versioning is done in git, while each hosts has it's own branch.
#
# Depends: git, getfacl setfacl
#
# TODO: 
#   - merge from other host
#   - restore "all"
#   - show diff
#   - run as user. Request root if necessary.
#   - create arch configuration packages?
#   - support recursive directories

REPO="/mnt/extHDD/backup/cfgbak.git"
_cmd=$1
SRC=$2
# get command line arguments and set cfg_ variables
unset OPTIND
unset OPTARG
while getopts hvd _opts
do
    case ${_opts} in
        d)
            echo "Dry-run. No file modificaions !!"
            DRYRUN=true
            ;;
        v)
            VERBOSE=true
            ;;
        h)
            echo "Usage: cfgbak [OPTION] [store, restore] FILE"
            echo "  -d      Dry run."
            echo "  -v      verbose"
            exit 2
            ;;
        *)
            echo "Error, unknown parameter"
            exit 2
            ;;
    esac
done
CMD=${@:$OPTIND:1}
SRC=${@:$OPTIND+1:1}

# function to execute cmd's, or just print them for dry run
function EXEC {
    if [ ${DRYRUN} ]; then
        echo "# ${1}"
    else
        [ ${VERBOSE} ] && echo "EXEC: ${1}"
        eval ${1}
    fi
}

# create a new repo, if it does not exists
if [ ! -d ${REPO} ]; then
    echo "Error, no repo at ${REPO}"
    EXEC "git init ${REPO}"
fi
EXEC "git -C ${REPO} checkout ${HOSTNAME}"
# check for branch and create if necessary

# if relative path, prefix current path
if [ ! ${SRC:0:1} == "/" ]; then
    SRC=$(pwd)/${SRC}
fi
DST=${REPO}${SRC}

if [ ${VERBOSE} ]; then
    echo "CMD       : ${CMD}"
    echo "SRC       : ${SRC}"
    [ ${DRYRUN} ] && echo "Dry-run   : true"
    echo "Repo      : ${REPO}"
fi

# [ ! ${SRC:0:1} == "/" ] && echo "Error, src not absolut" && exit

case ${CMD} in
    store)
        echo "-> store ${SRC} to ${DST}"
        [ ! -f ${SRC} ] && echo "Error, src not found" && exit
        # if dst path not exists, create
        DSTPATH=$(dirname ${DST})
        [ ! -d ${DSTPATH} ] && EXEC "mkdir -p ${DSTPATH}"
        #TODO: store permissions of path
        EXEC "cp -rf ${SRC} ${DST}"
        # store file permissions
        EXEC "getfacl -p ${SRC} > ${DST}.facl"
        EXEC "git -C ${REPO} add ${DST}*"
        EXEC "git -C ${REPO} commit -m 'backup'"
        ;;
    restore)
        echo "-> restore ${DST} to ${SRC}"
        [ ! -f ${DST} ] && echo "Error, src not found" && exit
        SRCPATH=$(dirname ${SRC})
        EXEC "mkdir -p ${SRCPATH}"
        EXEC "cp -rf ${DST} ${SRC}"
        EXEC "setfacl --restore=${DST}.facl"
        # if fail, maybe we miss permission -> sudo
        ;;
    *)
        echo "Error, unknown command!"
        exit
        ;;
esac
